{
	"info": {
		"_postman_id": "33a3283f-bfab-4722-952d-d518b1f8da3c",
		"name": "Petstore User API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34833341"
	},
	"item": [
		{
			"name": "createWithList - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message should be OK\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithList",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithList"
					]
				}
			},
			"response": []
		},
		{
			"name": "createWithList - N (Missing Username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400 or 500 for invalid input\", function () {\r",
							"    pm.expect([400, 500]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message should be present\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"'You missed the fields brother'\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithList",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithList"
					]
				}
			},
			"response": []
		},
		{
			"name": "user/{Username} - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username is Aboody\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Aboody\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes expected fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
							"    pm.expect(jsonData).to.have.property(\"email\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"Aboody\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/Aboody",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"Aboody"
					]
				}
			},
			"response": []
		},
		{
			"name": "user/{Username} - N (Invalid User)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 404 for non-existent user\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message indicates user not found\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"goog\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/goog",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"goog"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Update confirmed with user ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^\\d+$/); // expecting a number ID\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"username\": \"Aboody\",\r\n  \"firstName\": \"Updated\",\r\n  \"lastName\": \"Name\",\r\n  \"email\": \"newemail@example.com\",\r\n  \"password\": \"newpass123\",\r\n  \"phone\": \"999999999\",\r\n  \"userStatus\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/Aboody",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"Aboody"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateUser - N",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404 or 500 for update failure\", function () {\r",
							"    pm.expect([404, 500]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message should be present\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 2,\r\n  \"username\": \"goog\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/goog",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"goog"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Delete confirmation includes user ID or message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/string",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"string"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteUser - N",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 404 or 500 for non-existent user\", function () {\r",
							"    pm.expect([404, 500]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message indicates user not found\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include(\"not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/goog",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"goog"
					]
				}
			},
			"response": []
		},
		{
			"name": "login - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login successful message present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.include(\"logged in user session:\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/login?username=Aboody&password=abc123",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "Aboody"
						},
						{
							"key": "password",
							"value": "abc123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login - N (Wrong Password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should fail with 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Login error message shown\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.include(\"invalid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/login?username=Aboody&password=wrongpassword",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "Aboody"
						},
						{
							"key": "password",
							"value": "wrongpassword"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "logout - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Logout successful message present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.include(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/logout",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "createWithArray - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response confirms success\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message.toLowerCase()).to.eql(\"ok\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 10,\r\n    \"username\": \"arrayUser1\",\r\n    \"firstName\": \"Array\",\r\n    \"lastName\": \"UserOne\",\r\n    \"email\": \"array1@example.com\",\r\n    \"password\": \"pass123\",\r\n    \"phone\": \"1111111111\",\r\n    \"userStatus\": 1\r\n  },\r\n  {\r\n    \"id\": 11,\r\n    \"username\": \"arrayUser2\",\r\n    \"firstName\": \"Array\",\r\n    \"lastName\": \"UserTwo\",\r\n    \"email\": \"array2@example.com\",\r\n    \"password\": \"pass456\",\r\n    \"phone\": \"2222222222\",\r\n    \"userStatus\": 1\r\n  }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithArray",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "createWithArray - N (Missing fields)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 400 or 500 for invalid array input\", function () {\r",
							"    pm.expect([400, 500]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message should be present\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"'You missed the fields brother'\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 12,\r\n    \"firstName\": \"BadUser\"\r\n    // missing username, email, etc.\r\n  }\r\n]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user/createWithArray",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "user - P",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User created - message should be a number\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.match(/^\\d+$/); // usually user ID\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"Aboody\",\r\n  \"firstName\": \"Abdullah\",\r\n  \"lastName\": \"Khaled\",\r\n  \"email\": \"string\",\r\n  \"password\": \"abc123\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user - N (Missing Username)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 400 or 500 for bad input\", function () {\r",
							"    pm.expect([400, 500]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message should exist\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a(\"'you forgot ur username'\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 101,\r\n  \"firstName\": \"MissingUsername\",\r\n  \"lastName\": \"Error\",\r\n  \"email\": \"invalid@example.com\",\r\n  \"password\": \"nopass\",\r\n  \"phone\": \"0000000000\",\r\n  \"userStatus\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/user",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"user"
					]
				}
			},
			"response": []
		}
	]
}